import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

class Node{
    int data;
    int depth;
    Node left;
    Node right;
}


public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */

        Scanner in = new Scanner(System.in);
        int nomberOfNodes = Integer.parseInt(in.nextLine());
        Node root = new Node();
        Node result = root;
        root.data = 1;
        root.depth = 1;


        //Tworzenie i wyplenianie drzewa

        Queue<Node> queue = new LinkedList<Node>();
                    while(queue.peek() != null || root != null){

                        String readLine = in.nextLine();
                        String [] dataNodeString = readLine.split(" ");
                        int [] dataNode = new int[2];
                        dataNode[0] = Integer.parseInt(dataNodeString[0]);
                        dataNode[1] = Integer.parseInt(dataNodeString[1]);

                        if(root.left == null && dataNode[0] != -1){
                            root.left = new Node();
                            //root = root.left;
                            root.left.data = dataNode[0];
                            root.left.depth = root.depth + 1;
                            queue.add(root.left);
                        }
                        if(root.right == null && dataNode[1] != -1){
                            root.right = new Node();
                            //root = root.right;
                            root.right.data = dataNode[1];
                            root.right.depth = root.depth + 1;
                            queue.add(root.right);
                        }
                        root = queue.poll();
                    }
 
        //ilosc zmian i na jakich glebokosciach
        int t = in.nextInt();
        int [] swapLevels = new int [t];
        for(int arr_i = 0; arr_i < t; arr_i++){
            swapLevels[arr_i] = in.nextInt();  
        }

        //zamien i drukuj rezultat
        swapNodes(result, swapLevels);
        in.close();
    }
    
         static void swapNodes(Node root, int [] swapLevels) {
                     

                     for(int i = 0 ; i < swapLevels.length ; i++){
                             Node node = root;
                            Queue<Node> queue = new LinkedList<Node>();
                             while(queue.peek() != null || node != null){
                                              
                                  // zmien kazda warstwe gdzie depth jest rowne 2K, 3K ...
                                    if( node.depth % swapLevels[i] == 0){
                                        Node temp = node.right;
                                        node.right = node.left;
                                        node.left = temp;
                                    }
                                
                                    if(node.left != null) queue.add(node.left);
                                    if(node.right != null) queue.add(node.right);
                                    node = queue.poll();
                             }
                         inorderPrint(root);
                          System.out.println();
                     }

        }
    
      public static void inorderPrint(Node root){
        if (root != null){
            inorderPrint(root.left);
            System.out.print(root.data + " ");
            inorderPrint(root.right);
        }
    }
}